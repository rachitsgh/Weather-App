module.exports = Builder;
var  CommandBus = require("./CommandBus"), 
	   ServiceBus = require("./ServiceBus"),
	   EventBus = require("./EventBus"),
	   AggreProto = require("./AggreProto"),
	   util  =  require("util");

function Builder(){

	var AggreTypes  = this._AggreTypes = {};
	this._db = null;
	var proxy = {}
	var serviceBus = this._serviceBus = new ServiceBus(proxy);
	
	this._service = function(serviceName,args){
		serviceBus.exec(serviceName,args);
	}
	
	this._getAgg = function(name){
		var T = AggreTypes[name];
		return T;
	}
    
	this.eventBus = new EventBus({getAgg:this._getAgg,service:this._service});
	this.commandBus = new CommandBus({getAgg:this._getAgg,service:this._service});
	
}

Builder.prototype = {

	bindService:function(name,service){
		this._serviceBus.bind(name,service);
		return this;
	},
	
	bindAgg:function(Agg){
        
        var self  =  this;
    
        var methods  =  Agg.methods;
    
		function T(data) {
            if(arguments.length !== 1){ 
                throw new Error("argument must a json object. example  new Aggre({name:...  ,  age:...});"); 
            } 
			if (data.__in__) {
				delete data.__in__;
				AggreProto.call(this, data);
			} else {
				AggreProto.call(this, Agg.init(data));
			}
		}
		
		if(this._db){
			T._db = this._db;
		}
        
		T.get = AggreProto.get;
		T._cache = {}
		T.typeName = Agg.typeName;
		
		util.inherits(T,AggreProto);
		T.prototype._AggreTypes = this._AggreTypes;
		T.prototype._serviceBus = this._serviceBus;
		T.prototype._eventBus = this.eventBus;
		
		for (var k in methods) {
            (function(key,m){    
			T.prototype[key] = function(){
                
                if(arguments.length > 1){ 
                    throw new Error("argument must a json object. example  agg.fun({name:...,age:...}) ;"); 
                }
                
                var that = this;
                
                var my = {
                    data:function(){
                        return that.__data.apply(that,arguments);
                    },
                    publish:function(e,d){
                        return that._publish.apply(that,arguments);
                    },
                    service:self._service,
                    getAgg:self._getAgg
                };

                var args = [];
                args.push(arguments[0]?arguments[0]:{});
                args.push(my); 
                return m.apply(this,args);      
                }
            })(k,methods[k]);
            
		}
		
		this._AggreTypes[Agg.typeName] = T;
		return this;
        
	},
	bindCommandHandle:function(name,commandHandle){
		this.commandBus.bind(name,commandHandle);
		return this;
	},
	bindEventHandle:function(){
		this.eventBus._on.apply(this.eventBus,arguments)
		return this;
	},
	bindDB:function(db){
		this._db = db;
		for(var k in this._AggreTypes){
			this._AggreTypes[k]._db = db;
		}
		return this;
	}
}