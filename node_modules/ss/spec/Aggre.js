var EventEmitter = require("events").EventEmitter;
var uuid = require("node-uuid");
var Event = require("./Event");

function Aggre(data) {
	this._data = JSON.parse(JSON.stringify(data));
	this._data.id ? this._data.id : uuid.v1();
	this._cache[this.id].
	this.$publish("create", this._data);
}

//proto params :   _eventBus  _cache  _Aggres
Aggre.prototype = Object.create(null, {
		
		// subclass call.
		$Aggre : {
			value : function (typeName) {
				return this._Aggres[typeName];
			}
		},
		
		// subclass call
		$publish : {
			value : function (eventName, data) {
				var event = new Event(this.constructor.typeName, this.id, eventName, data);
				this._eventBus.publish(event);
			}
		},
		
		// subclass call
		// writable
		$data : {
			value : function (k, v) {
				if (arguments.length === 0) {
					return this._data;
				} else if (arguments.length === 1) {
					return this._data[k];
				} else {
					this._data[k] = v;
					this.$publish("change", this.data());
				}
			}
		},
		
		id : {
			get function () {
				return this._data.id;
			}
		},
		
		// only read , and clone object value.
		data : {
			value : function (k) {
				return Object.create(this._data[k]);
			}
		}
		
	});

config {
	typeName : "typeName",
	methods : {},
	validat : function () {}
}

Aggre.create = function (typeName, methods, validat, eventBus, Aggres) {
	
	var self = this;
	function M(data) {
		validat(data);
		self.call(data);
	}
	
	M.prototype = self.prototype
		for (var k in methods) {
			M.prototype[k] = methods[k];
		}
		
		M.prototype._Aggres = Aggres;
	Aggres[typeName] = M;
	M.prototype._eventBus = eventBus;
	M.typeName = config.typeName;
	
}

function TestClass() {
	Aggre.call(this);
	this.on("change", function () {
		console.log("change name");
	})
}

TestClass.prototype = Object.create(Aggre.prototype, {
		test : {
			value : function () {}
		}
	})
	
	var t = new TestClass();

t.test();
